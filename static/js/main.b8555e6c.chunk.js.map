{"version":3,"sources":["actions.js","components/LoginForm.js","components/MainTable.js","components/Header.js","components/AdresDescription.js","App.js","serviceWorker.js","store.js","index.js"],"names":["loginError","error","type","LoginForm","loginErr","useSelector","state","accept","dispatch","useDispatch","className","onSubmit","e","console","log","target","login","preventDefault","user","value","password","fetch","headers","Accept","then","response","ok","json","username","userName","loginSucsess","catch","err","TextField","label","name","Button","variant","color","push","to","useStyles","makeStyles","mainDiv","minWidth","display","justifyContent","tableDiv","flexDirection","alignItems","maxWidth","table","width","inputFilter","alignSelf","createData","id","country","region","city","street","build","notes","rows","MainTable","mainTable","classes","useState","filter","setFilter","data","setData","notFound","setNotFound","history","useHistory","null","Object","entries","k","object","dbError","onChange","indexOf","length","Filter","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","onClick","scope","Header","but","exact","input","paddingBottom","signIn","paddingTop","AdresDescription","useParams","countries","regions","citis","streets","title","q","i","style","marginBottom","borderRadius","border","Grid","container","direction","justify","obj","method","body","JSON","stringify","alert","window","go","saveChange","Autocomplete","freeSolo","options","getOptionLabel","option","renderInput","params","App","path","Boolean","location","hostname","match","defaultState","singleRow","store","createStore","action","newTable","dbErr","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8555e6c.chunk.js","sourcesContent":["\r\nexport const LOGIN_ERROR = \"LOGIN_ERROR\";\r\nexport const LOGIN_SUCSESS = \"LOGIN_SUCSESS\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\nexport const PUSH_TABLE = \"PUSH_TABLE\";\r\nexport const DATA_ERROR = \"DATA_ERROR\";\r\nexport const PUSH_ROW = \"PUSH_ROW\";\r\n\r\nexport const loginSucsess = (user) => ({\r\n\ttype: LOGIN_SUCSESS,\r\n\tuserName: user,\r\n\taccept: true\r\n  });\r\n\r\nexport const loginError = (error) => ({\r\n\t\ttype: LOGIN_ERROR,\r\n\t\tloginError: error\r\n});\r\nexport const logOut = () => ({\r\n\t\ttype: LOG_OUT\r\n});\r\nexport const pushTable = (table) => ({\r\n\t\ttype: PUSH_TABLE,\r\n\t\tmainTable: table\r\n});\r\nexport const pushRow = (table, id) => ({\r\n\t\ttype: PUSH_ROW,\r\n\t\tnewTable: table,\r\n\t\tid:id\r\n});\r\nexport const dbErr = (error) => ({\r\n\t\ttype: DATA_ERROR,\r\n\t\tdbError: error\r\n});\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { loginSucsess, loginError} from \"../actions\";\r\n\r\n\r\n\r\n\r\n\r\nexport default function LoginForm() {\r\n  const loginErr = useSelector(state => state.loginError);\r\n  const accept = useSelector(state => state.accept);\r\n  const dispatch = useDispatch();\r\n \r\n  const onSubmit = e => {\r\n    console.log(e.target.login);\r\n    e.preventDefault();\r\n    const user = e.target.login.value;\r\n    const password = e.target.password.value;\r\n    fetch(`./fakeBackEnd/users/${user}.json`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      }\r\n    }).then(response => {\r\n      if (response.ok) {\r\n        if (loginErr !== \"\") {\r\n          dispatch(loginError(''));\r\n        }\r\n        response\r\n          .json()\r\n          .then(json => {\r\n            if (json.username === user && json.password === password) {\r\n              dispatch(loginSucsess(user));\r\n            } else {\r\n              dispatch(loginError('Incorrect Password!'));\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.log(\"Error Reading data \" + err);\r\n          });\r\n      } else {\r\n        dispatch(loginError('Login not found!'));\r\n      }\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <form  className={\"sign__form\"} onSubmit={e => onSubmit(e)}>\r\n      {/* <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\"> */}\r\n        <TextField\r\n          className={\"input\"}\r\n          label=\"Name\"\r\n          name=\"login\"\r\n        />\r\n        <TextField\r\n          className={'input'}\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n        />\r\n        <Button\r\n          className={\"signIn\"}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n        >\r\n          Sign In\r\n        </Button>\r\n        {accept === true ? <Redirect push to=\"/list\" /> : loginErr}\r\n      {/* </Grid> */}\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport {pushTable, dbErr} from \"../actions\";\r\n\r\nconst useStyles = makeStyles({\r\n  mainDiv:{\r\n    minWidth: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  tableDiv: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    maxWidth: \"100%\"\r\n  },\r\n  table: {\r\n    width: \"100%\"\r\n  },\r\n  inputFilter:{\r\n    alignSelf:\"flex-start\"\r\n  }\r\n});\r\n\r\nfunction createData(id, country, region, city, street, build, notes) {\r\n  return { id, country, region, city, street, build, notes };\r\n}\r\n\r\nlet rows = [createData(null, null, null, null, null, null, null)];\r\n\r\nexport default function MainTable() {\r\n  const mainTable = useSelector(state => state.mainTable);\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [filter, setFilter] = useState({ country: \"\"});\r\n  const [data, setData] = useState();\r\n  const [notFound, setNotFound] = useState(\"\");\r\n  const accept = useSelector(state => state.accept);\r\n  let history = useHistory();\r\n  const goToAdres = id => {\r\n    history.push(\"/address/\" + id);\r\n  };\r\n  const Filter = e => {\r\n    e.preventDefault();\r\n    rows = [];\r\n    for (let [k, object] of Object.entries(data)) {\r\n      if(object.country.indexOf(e.target.value) === 0 || object.country.indexOf(e.target.value)===1){\r\n        rows[k] = createData(\r\n          object.id,\r\n          object.country,\r\n          object.region,\r\n          object.city,\r\n          object.street,\r\n          object.build,\r\n          object.notes\r\n        );\r\n      }\r\n    }\r\n    if(rows.length === 0){\r\n      setNotFound(\"Такой страны нет в списке\");\r\n    }else{\r\n      setNotFound(\"\");\r\n    }\r\n    setFilter({\r\n      country: e.target.value}\r\n    )\r\n  };\r\n\r\n  if (accept === false) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  if (mainTable.null) {\r\n    fetch(`./fakeBackEnd/adresses/Adresses.json`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      }\r\n    }).then(response => {\r\n      if (response.ok) {\r\n        response\r\n          .json()\r\n          .then(json => {\r\n            for (let [k, object] of Object.entries(json)) {\r\n              rows[k] = createData(\r\n                object.id,\r\n                object.country,\r\n                object.region,\r\n                object.city,\r\n                object.street,\r\n                object.build,\r\n                object.notes\r\n              );\r\n            }\r\n            setData(rows);\r\n            //EDIT THIS CODE\r\n            dispatch(pushTable(rows));\r\n          })\r\n          .catch(err => {\r\n            console.log(\"Error Reading data \" + err);\r\n          });\r\n      } else {\r\n        console.log(\"Error Reading data \");\r\n        dispatch(dbErr(\"Database not found!\") );\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <div className={classes.mainDiv}>\r\n      <div className={classes.tableDiv}>\r\n        <TextField\r\n          className={classes.inputFilter}\r\n          id=\"outlined-search\"  \r\n          type=\"search\" \r\n          label=\"Введите страну\"\r\n          variant=\"outlined\"\r\n          name=\"country\"\r\n          value={filter.country}\r\n          onChange={e => Filter(e)}\r\n        />\r\n        <TableContainer className={classes.table} component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Страна</TableCell>\r\n                <TableCell align=\"right\">Регион</TableCell>\r\n                <TableCell align=\"right\">Наеленный пункт</TableCell>\r\n                <TableCell align=\"right\">Улица</TableCell>\r\n                <TableCell align=\"right\">Дом/квартира/корпус</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map(row => (\r\n                <TableRow\r\n                  key={row.id}\r\n                  className=\"selectRow\"\r\n                  onClick={() => goToAdres(row.id)}\r\n                  id={\"adresRow\" + row.id}\r\n                >\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row.country}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">{row.region}</TableCell>\r\n                  <TableCell align=\"right\">{row.city}</TableCell>\r\n                  <TableCell align=\"right\">{row.street}</TableCell>\r\n                  <TableCell align=\"right\">{row.build}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        {notFound}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport default function Header() {\r\n  const name = useSelector(state => state.userName);\r\n  const accept = useSelector(state => state.accept);\r\n  const dispatch = useDispatch();\r\n  let but = \"\";\r\n\r\n  if (accept === true) {\r\n    but = (\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={e => {\r\n          e.preventDefault();\r\n          dispatch({ type: \"LOG_OUT\"});\r\n          return <Redirect exact to=\"/\" />;\r\n        }}\r\n      >\r\n        Выйти\r\n      </Button>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className={\"header\"}>\r\n      <div className={\"headerInner\"}>\r\n        <div>Привет {name}</div>\r\n        {but}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  input: {\r\n    paddingBottom: 15\r\n  },\r\n  signIn: {\r\n    paddingTop: 10\r\n  }\r\n});\r\n\r\nexport default function AdresDescription() {\r\n  const { id } = useParams();\r\n  const row = useSelector(state => state.mainTable[id]);\r\n  const table = useSelector(state => state.mainTable);\r\n  const classes = useStyles();\r\n  \r\n  let countries = [];\r\n  let regions = [];\r\n  let citis  = [];\r\n  let streets = [];\r\n  for (let [k, object] of Object.entries(table)) {\r\n    countries[k] = { title: object.country };\r\n    regions[k] = { title: object.region };\r\n    citis[k] = { title: object.city };\r\n    streets[k] = { title: object.street };\r\n  }\r\n\r\n\r\n  for (var q=1, i=1; q<countries.length; q++) {\r\n    \r\n    if (countries[q].title !== countries[q-1].title) {\r\n      countries[i++] = countries[q];\r\n    }\r\n  }\r\n  countries.length = i;\r\n\r\n  const saveChange = e => {\r\n    e.preventDefault();\r\n    const data = e.target;\r\n    let obj = {\r\n      [id]: {\r\n        id: id,\r\n        country: data.country.value,\r\n        region: data.region.value,\r\n        city: data.city.value,\r\n        street: data.street.value,\r\n        build: data.build.value,\r\n        notes: data.build.value\r\n      }\r\n    };\r\n\r\n    fetch(\"../fakeBackEnd/file.php\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(obj)\r\n    })\r\n      .then(response => {\r\n        //Обработка ответа от сервера и работа с данными будет где-то тут\r\n        alert(\"Успешно сохранено(Было бы, но серверной части нет, по этому, запрос отправлен, а ответ 404)\");\r\n        console.log(response); //консолим ответ\r\n        window.history.go(-1); //для наглядности добавил возврат к таблице\r\n      })\r\n      .catch(error => console.error(error));\r\n  };\r\n\r\n  if (!row || !id) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n  return (\r\n    <div style={{ display: \"grid\", justifyContent:\"center\" }}>\r\n      <div style={{ width: 230, marginBottom:30, borderRadius: 10, border:\"1px solid black\" }}>\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n      <div className=\"card__item\">{row.country}</div>\r\n      <div className=\"card__item\">{row.region}</div>\r\n      <div className=\"card__item\">{row.city}</div>\r\n      <div className=\"card__item\">{row.street}</div>\r\n      <div className=\"card__item\">{row.build}</div>\r\n      <div className=\"card__item\">{row.notes}</div>\r\n      </Grid>\r\n      </div>\r\n      <h2>Редактирование</h2>\r\n      <form onSubmit={e => saveChange(e)}>\r\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n        \r\n          <Autocomplete\r\n            freeSolo\r\n            id=\"free-solo-demo\"\r\n            options={countries}\r\n            getOptionLabel={option => option.title}\r\n            style={{ width: 230, display: \"grid\" }}\r\n            renderInput={params => (\r\n              <TextField\r\n                {...params}\r\n                className={classes.input}\r\n                id=\"standard-basic\"\r\n                label=\"Страна\"\r\n                name=\"country\"\r\n              />\r\n            )}\r\n          />\r\n          \r\n           <Autocomplete\r\n            freeSolo\r\n            id=\"free-solo-demo\"\r\n            options={regions}\r\n            getOptionLabel={option => option.title}\r\n            style={{ width: 230, display: \"grid\" }}\r\n            renderInput={params => (\r\n          <TextField\r\n          {...params}\r\n            className={classes.input}\r\n            id=\"standard-basic\"\r\n            label=\"Регион\"\r\n            name=\"region\"\r\n          />)}\r\n          />\r\n          <Autocomplete\r\n            freeSolo\r\n            id=\"free-solo-demo\"\r\n            options={citis}\r\n            getOptionLabel={option => option.title}\r\n            style={{ width: 230, display: \"grid\" }}\r\n            renderInput={params => (\r\n          <TextField\r\n          {...params}\r\n            className={classes.input}\r\n            id=\"standard-basic\"\r\n            label=\"Город\"\r\n            name=\"city\"\r\n          />)}\r\n          />\r\n          <Autocomplete\r\n            freeSolo\r\n            id=\"free-solo-demo\"\r\n            options={streets}\r\n            getOptionLabel={option => option.title}\r\n            style={{ width: 230, display: \"grid\" }}\r\n            renderInput={params => (\r\n          <TextField\r\n          {...params}\r\n            className={classes.input}\r\n            id=\"standard-basic\"\r\n            label=\"Улица\"\r\n            name=\"street\"\r\n            // inputProps={{ ...params.InputProps, value: state.row.street }}\r\n            // onChange={e =>\r\n            //   setState({\r\n            //     row: {\r\n            //       ...state.row,\r\n            //       street: e.target.value\r\n            //     }\r\n            //   })\r\n            // }\r\n          />)}\r\n          />\r\n          <TextField\r\n            className={classes.input}\r\n            id=\"standard-basic\"\r\n            label=\"Дом/корпус/квартира\"\r\n            name=\"build\"\r\n            style={{ width: 230, display: \"grid\" }}\r\n          />\r\n          <TextField\r\n            className={classes.input}\r\n            id=\"outlined-basic\"\r\n            label=\"Примечание\"\r\n            name=\"notes\"\r\n            variant=\"outlined\"\r\n            style={{ width: 230, display: \"grid\" }}\r\n          />\r\n          <Button\r\n            className={classes.signIn}\r\n            variant=\"contained\"\r\n            type=\"submit\"\r\n            color=\"primary\"\r\n          >\r\n            Сохранить\r\n          </Button>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Router, Route } from \"react-router-dom\";\nimport LoginForm from \"./components/LoginForm\";\nimport MainTable from \"./components/MainTable\";\nimport Header from \"./components/Header\";\nimport AdresDescription from \"./components/AdresDescription\";\n\nfunction App() {\n  return (\n   \n    <BrowserRouter>\n    {/* <Router> */}\n      <Header />\n      <Route exact path=\"/\">\n        <LoginForm />\n      </Route>\n      {/* </Router> */}\n      <Route path=\"/list\">\n        <MainTable />\n      </Route>\n      <Route path=\"/address/:id\">\n        <AdresDescription />\n      </Route>\n      \n     </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from \"redux\";\r\n\r\nconst defaultState = {\r\n  userName: \"Guest\",\r\n  accept: false,\r\n  loginError: \"\",\r\n  mainTable: {\r\n    null: {\r\n      id: null,\r\n      country: null,\r\n      region: null,\r\n      city: null,\r\n      street: null,\r\n      build: null\r\n    }\r\n  },\r\n  singleRow: null\r\n};\r\n\r\nfunction reducer(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case \"LOGIN_ERROR\":\r\n      return {\r\n        ...state,\r\n        loginError: action.loginError\r\n      };\r\n    case \"LOGIN_SUCSESS\":\r\n      return {\r\n        ...state,\r\n        userName: action.userName,\r\n        accept: action.accept\r\n      };\r\n    case \"LOG_OUT\":\r\n      return {\r\n        userName: \"Гость\",\r\n        accept: false,\r\n        loginError: \"\",\r\n        mainTable: {\r\n          null: {\r\n            id: null,\r\n            country: null,\r\n            region: null,\r\n            city: null,\r\n            street: null,\r\n            build: null\r\n          }\r\n        },\r\n        singleRow: null\r\n      };\r\n    case \"PUSH_TABLE\":\r\n      return {\r\n        ...state,\r\n        mainTable: action.mainTable\r\n      };\r\n    case \"PUSH_ROW\":\r\n      return {\r\n        ...state,\r\n        // mainTable: {\r\n        //   [action.id]:action.newTable\r\n        // }\r\n        [state.mainTable]:{ [action.id]: action.newTable}\r\n        \r\n      };\r\n      case \"DATA_ERROR\":\r\n        return{\r\n          ...state,\r\n          dbErr: action.dbErr\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const store = createStore(reducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}