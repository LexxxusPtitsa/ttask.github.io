{"version":3,"sources":["actions.js","components/LoginForm.js","components/MainTable.js","components/Header.js","components/AdresDescription.js","App.js","serviceWorker.js","store.js","index.js"],"names":["loginError","error","type","LoginForm","loginErr","useSelector","state","accept","dispatch","useDispatch","logIn","e","console","log","target","login","preventDefault","user","value","password","fetch","headers","Accept","then","response","ok","json","username","userName","loginSucsess","catch","err","onSubmit","className","TextField","label","name","Button","variant","color","push","to","createData","id","country","region","city","street","build","notes","rows","MainTable","mainTable","useState","filter","setFilter","data","setData","notFound","setNotFound","history","useHistory","null","Object","entries","k","object","dbError","onChange","indexOf","length","Filter","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","onClick","scope","Header","but","exact","useStyles","makeStyles","input","paddingBottom","signIn","paddingTop","marginBottom","AdresDescription","useParams","table","classes","countries","regions","citis","streets","title","q","i","saveCh","obj","method","body","JSON","stringify","alert","window","go","saveChange","Grid","style","width","borderRadius","border","container","direction","justify","alignItems","Fab","button","document","querySelector","form","opacity","pointerEvents","classList","remove","add","visible","Autocomplete","freeSolo","options","getOptionLabel","option","display","renderInput","params","App","location","href","path","Boolean","hostname","match","defaultState","singleRow","store","createStore","action","newTable","dbErr","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc108a1a.chunk.js","sourcesContent":["export const LOGIN_ERROR = \"LOGIN_ERROR\";\r\nexport const LOGIN_SUCSESS = \"LOGIN_SUCSESS\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\nexport const PUSH_TABLE = \"PUSH_TABLE\";\r\nexport const DATA_ERROR = \"DATA_ERROR\";\r\nexport const PUSH_ROW = \"PUSH_ROW\";\r\n\r\nexport const loginSucsess = user => ({\r\n  type: LOGIN_SUCSESS,\r\n  userName: user,\r\n  accept: true\r\n});\r\n\r\nexport const loginError = error => ({\r\n  type: LOGIN_ERROR,\r\n  loginError: error\r\n});\r\nexport const logOut = () => ({\r\n  type: LOG_OUT\r\n});\r\nexport const pushTable = table => ({\r\n  type: PUSH_TABLE,\r\n  mainTable: table\r\n});\r\nexport const pushRow = (table, id) => ({\r\n  type: PUSH_ROW,\r\n  newTable: table,\r\n  id: id\r\n});\r\nexport const dbErr = error => ({\r\n  type: DATA_ERROR,\r\n  dbError: error\r\n});\r\n\r\nexport const saveChange = (e, id) => {\r\n  e.preventDefault();\r\n  const data = e.target;\r\n  let obj = {\r\n    [id]: {\r\n      id: id,\r\n      country: data.country.value,\r\n      region: data.region.value,\r\n      city: data.city.value,\r\n      street: data.street.value,\r\n      build: data.build.value,\r\n      notes: data.build.value\r\n    }\r\n  };\r\n\r\n  fetch(\"../fakeBackEnd/file.php\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify(obj)\r\n  })\r\n    .then(response => {\r\n      //Обработка ответа от сервера и работа с данными будет где-то тут\r\n      alert(\r\n        \"Успешно сохранено(Было бы, но серверной части нет, по этому, запрос отправлен, а ответ 404)\"\r\n      );\r\n      console.log(response); //консолим ответ\r\n      window.history.go(-1); //для наглядности добавил возврат к таблице\r\n    })\r\n    .catch(error => console.error(error));\r\n};\r\n\r\nexport const onSubmit = (e,loginErr,dispatch) => {\r\n  console.log(e.target.login);\r\n  e.preventDefault();\r\n  const user = e.target.login.value;\r\n  const password = e.target.password.value;\r\n  fetch(`./fakeBackEnd/users/${user}.json`, {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\"\r\n    }\r\n  }).then(response => {\r\n    if (response.ok) {\r\n      if (loginErr !== \"\") {\r\n        dispatch(loginError(\"\"));\r\n      }\r\n      response\r\n        .json()\r\n        .then(json => {\r\n          if (json.username === user && json.password === password) {\r\n            dispatch(loginSucsess(user));\r\n          } else {\r\n            dispatch(loginError(\"Incorrect Password!\"));\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(\"Error Reading data \" + err);\r\n        });\r\n    } else {\r\n      dispatch(loginError(\"Login not found!\"));\r\n    }\r\n  });\r\n};\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {onSubmit} from \"../actions\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function LoginForm() {\r\n  const loginErr = useSelector(state => state.loginError);\r\n  const accept = useSelector(state => state.accept);\r\n  const dispatch = useDispatch();\r\n  \r\n  const logIn = (e) =>{\r\n    onSubmit(e,loginErr,dispatch);\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"main__inner\">\r\n    <form  className={\"sign__form\"} onSubmit={e => logIn(e)}>\r\n        <TextField\r\n          className={\"input\"}\r\n          label=\"Name\"\r\n          name=\"login\"\r\n        />\r\n        <TextField\r\n          className={'input'}\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n        />\r\n        <Button\r\n          className={\"signIn\"}\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n        >\r\n          Sign In\r\n        </Button>\r\n        {accept === true ? <Redirect push to=\"/ttask.github.io/list\" /> : loginErr}\r\n    </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport {pushTable, dbErr} from \"../actions\";\r\n\r\n\r\nfunction createData(id, country, region, city, street, build, notes) {\r\n  return { id, country, region, city, street, build, notes };\r\n}\r\n\r\nlet rows = [createData(null, null, null, null, null, null, null)];\r\n\r\nexport default function MainTable() {\r\n  const mainTable = useSelector(state => state.mainTable);\r\n  const dispatch = useDispatch();\r\n  const [filter, setFilter] = useState({ country: \"\"});\r\n  const [data, setData] = useState();\r\n  const [notFound, setNotFound] = useState(\"\");\r\n  const accept = useSelector(state => state.accept);\r\n  let history = useHistory();\r\n  const goToAdres = id => {\r\n    history.push(\"/ttask.github.io/address/\" + id);\r\n  };\r\n  const Filter = e => {\r\n    e.preventDefault();\r\n    rows = [];\r\n    for (let [k, object] of Object.entries(data)) {\r\n      if(object.country.indexOf(e.target.value) === 0 || object.country.indexOf(e.target.value)===1){\r\n        rows[k] = createData(\r\n          object.id,\r\n          object.country,\r\n          object.region,\r\n          object.city,\r\n          object.street,\r\n          object.build,\r\n          object.notes\r\n        );\r\n      }\r\n    }\r\n    if(rows.length === 0){\r\n      setNotFound(\"Такой страны нет в списке\");\r\n    }else{\r\n      setNotFound(\"\");\r\n    }\r\n    setFilter({\r\n      country: e.target.value}\r\n    )\r\n  };\r\n\r\n  if (accept === false) {\r\n    return <Redirect to=\"/ttask.github.io/\" />;\r\n  }\r\n\r\n  if (mainTable.null) {\r\n    fetch(`./fakeBackEnd/adresses/Adresses.json`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      }\r\n    }).then(response => {\r\n      if (response.ok) {\r\n        response\r\n          .json()\r\n          .then(json => {\r\n            for (let [k, object] of Object.entries(json)) {\r\n              rows[k] = createData(\r\n                object.id,\r\n                object.country,\r\n                object.region,\r\n                object.city,\r\n                object.street,\r\n                object.build,\r\n                object.notes\r\n              );\r\n            }\r\n            setData(rows);\r\n            //EDIT THIS CODE\r\n            dispatch(pushTable(rows));\r\n          })\r\n          .catch(err => {\r\n            console.log(\"Error Reading data \" + err);\r\n          });\r\n      } else {\r\n        console.log(\"Error Reading data \");\r\n        dispatch(dbErr(\"Database not found!\") );\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <div className={\"main__tableDiv\"}>\r\n      <div className={\"tableDiv\"}>\r\n        <TextField\r\n          className={\"inputFilter\"}\r\n          id=\"outlined-search\"  \r\n          type=\"search\" \r\n          label=\"Введите страну\"\r\n          variant=\"outlined\"\r\n          name=\"country\"\r\n          value={filter.country}\r\n          onChange={e => Filter(e)}\r\n        />\r\n        <TableContainer className={\"table\"} component={Paper}>\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Страна</TableCell>\r\n                <TableCell align=\"right\">Регион</TableCell>\r\n                <TableCell align=\"right\">Населенный пункт</TableCell>\r\n                <TableCell align=\"right\">Улица</TableCell>\r\n                <TableCell align=\"right\">Дом/квартира/корпус</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map(row => (\r\n                <TableRow\r\n                  key={row.id}\r\n                  className=\"selectRow\"\r\n                  onClick={() => goToAdres(row.id)}\r\n                  id={\"adresRow\" + row.id}\r\n                >\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row.country}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">{row.region}</TableCell>\r\n                  <TableCell align=\"right\">{row.city}</TableCell>\r\n                  <TableCell align=\"right\">{row.street}</TableCell>\r\n                  <TableCell align=\"right\">{row.build}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        {notFound}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport default function Header() {\r\n  const name = useSelector(state => state.userName);\r\n  const accept = useSelector(state => state.accept);\r\n  const dispatch = useDispatch();\r\n  let but = \"\";\r\n\r\n  if (accept === true) {\r\n    but = (\r\n      <Button\r\n        variant=\"contained\"\r\n        // color=\"secondary\"\r\n        onClick={e => {\r\n          e.preventDefault();\r\n          dispatch({ type: \"LOG_OUT\"});\r\n          return <Redirect exact to=\"/ttask.github.io/\" />;\r\n        }}\r\n      >\r\n        Выйти\r\n      </Button>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className={\"header\"}>\r\n      <div className={\"headerInner\"}>\r\n        <div>Привет {name}!</div>\r\n        {but}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport { saveChange } from \"../actions\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nconst useStyles = makeStyles({\r\n  input: {\r\n    paddingBottom: 15\r\n  },\r\n  signIn: {\r\n    paddingTop: 10,\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function AdresDescription() {\r\n  const { id } = useParams();\r\n  const row = useSelector(state => state.mainTable[id]);\r\n  const table = useSelector(state => state.mainTable);\r\n  const classes = useStyles();\r\n\r\n  let countries = [];\r\n  let regions = [];\r\n  let citis = [];\r\n  let streets = [];\r\n  for (let [k, object] of Object.entries(table)) {\r\n    countries[k] = { title: object.country };\r\n    regions[k] = { title: object.region };\r\n    citis[k] = { title: object.city };\r\n    streets[k] = { title: object.street };\r\n  }\r\n\r\n  for (var q = 1, i = 1; q < countries.length; q++) {\r\n    if (countries[q].title !== countries[q - 1].title) {\r\n      countries[i++] = countries[q];\r\n    }\r\n  }\r\n  countries.length = i;\r\n\r\n  const saveCh = (e, id) => {\r\n    saveChange(e, id);\r\n  };\r\n\r\n  const visible = () => {\r\n    const button = document.querySelector(\".edit__button\");\r\n    const form = document.querySelector(\".address__form\");\r\n    if (!document.querySelector(\".hidden\")) {\r\n      form.style.opacity = \"1\";\r\n      form.style.pointerEvents = \"unset\";\r\n      button.classList.add(\"hidden\");\r\n    } else {\r\n      form.style.opacity = \".3\";\r\n      form.style.pointerEvents = \"none\";\r\n      button.classList.remove(\"hidden\");\r\n    }\r\n  };\r\n\r\n  if (!row || !id) {\r\n    return <Redirect to=\"/ttask.github.io/\" />;\r\n  }\r\n  return (\r\n    <div className=\"main__addressDIv\">\r\n      <div className=\"address__card\">\r\n        <Grid\r\n          style={{\r\n            width: 230,\r\n            marginBottom: 30,\r\n            borderRadius: 10,\r\n            border: \"1px solid black\"\r\n          }}\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <div className=\"card__item\">{row.country}</div>\r\n          <div className=\"card__item\">{row.region}</div>\r\n          <div className=\"card__item\">{row.city}</div>\r\n          <div className=\"card__item\">{row.street}</div>\r\n          <div className=\"card__item\">{row.build}</div>\r\n          <div className=\"card__item\">{row.notes}</div>\r\n        </Grid>\r\n      </div>\r\n      <div className=\"edit__form\">\r\n        <Fab\r\n          className=\"edit__button\"\r\n          color=\"secondary\"\r\n          aria-label=\"edit\"\r\n          onClick={() => visible()}\r\n        >\r\n          <EditIcon />\r\n        </Fab>\r\n        <div className=\"address__form\">\r\n          <h2>Редактирование</h2>\r\n          <form onSubmit={e => saveCh(e, id)}>\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Autocomplete\r\n                freeSolo\r\n                id=\"free-solo-demo\"\r\n                options={countries}\r\n                getOptionLabel={option => option.title}\r\n                style={{ width: 230, display: \"grid\" }}\r\n                renderInput={params => (\r\n                  <TextField\r\n                    {...params}\r\n                    className={classes.input}\r\n                    id=\"standard-basic\"\r\n                    label=\"Страна\"\r\n                    name=\"country\"\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <Autocomplete\r\n                freeSolo\r\n                id=\"free-solo-demo\"\r\n                options={regions}\r\n                getOptionLabel={option => option.title}\r\n                style={{ width: 230, display: \"grid\" }}\r\n                renderInput={params => (\r\n                  <TextField\r\n                    {...params}\r\n                    className={classes.input}\r\n                    id=\"standard-basic\"\r\n                    label=\"Регион\"\r\n                    name=\"region\"\r\n                  />\r\n                )}\r\n              />\r\n              <Autocomplete\r\n                freeSolo\r\n                id=\"free-solo-demo\"\r\n                options={citis}\r\n                getOptionLabel={option => option.title}\r\n                style={{ width: 230, display: \"grid\" }}\r\n                renderInput={params => (\r\n                  <TextField\r\n                    {...params}\r\n                    className={classes.input}\r\n                    id=\"standard-basic\"\r\n                    label=\"Город\"\r\n                    name=\"city\"\r\n                  />\r\n                )}\r\n              />\r\n              <Autocomplete\r\n                freeSolo\r\n                id=\"free-solo-demo\"\r\n                options={streets}\r\n                getOptionLabel={option => option.title}\r\n                style={{ width: 230, display: \"grid\" }}\r\n                renderInput={params => (\r\n                  <TextField\r\n                    {...params}\r\n                    className={classes.input}\r\n                    id=\"standard-basic\"\r\n                    label=\"Улица\"\r\n                    name=\"street\"\r\n                    // inputProps={{ ...params.InputProps, value: state.row.street }}\r\n                    // onChange={e =>\r\n                    //   setState({\r\n                    //     row: {\r\n                    //       ...state.row,\r\n                    //       street: e.target.value\r\n                    //     }\r\n                    //   })\r\n                    // }\r\n                  />\r\n                )}\r\n              />\r\n              <TextField\r\n                className={classes.input}\r\n                id=\"standard-basic\"\r\n                label=\"Дом/корпус/квартира\"\r\n                name=\"build\"\r\n                style={{ width: 230, display: \"grid\" }}\r\n              />\r\n              <TextField\r\n                className={classes.input}\r\n                id=\"outlined-basic\"\r\n                label=\"Примечание\"\r\n                name=\"notes\"\r\n                variant=\"outlined\"\r\n                style={{ width: 230, display: \"grid\" }}\r\n              />\r\n              <Button\r\n                className={classes.signIn}\r\n                variant=\"contained\"\r\n                type=\"submit\"\r\n                color=\"primary\"\r\n              >\r\n                Сохранить\r\n              </Button>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Redirect, Route } from \"react-router-dom\";\nimport LoginForm from \"./components/LoginForm\";\nimport MainTable from \"./components/MainTable\";\nimport Header from \"./components/Header\";\nimport AdresDescription from \"./components/AdresDescription\";\n\nfunction App() {\n\n  return (\n   \n    <BrowserRouter>\n    <div className=\"root__inner\">\n    {/* <Router> */}\n    {console.log(window.location.href)}\n      <Header />\n      <Route exact path=\"/ttask.github.io/\">\n        <LoginForm />\n      </Route>\n      {/* </Router> */}\n      <Route path=\"/ttask.github.io/list\">\n        <MainTable />\n      </Route>\n      <Route path=\"/ttask.github.io/address/:id\">\n        <AdresDescription />\n      </Route>\n      </div>\n     </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from \"redux\";\r\n\r\nconst defaultState = {\r\n  userName: \"Guest\",\r\n  accept: false,\r\n  loginError: \"\",\r\n  mainTable: {\r\n    null: {\r\n      id: null,\r\n      country: null,\r\n      region: null,\r\n      city: null,\r\n      street: null,\r\n      build: null\r\n    }\r\n  },\r\n  singleRow: null\r\n};\r\n\r\nfunction reducer(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case \"LOGIN_ERROR\":\r\n      return {\r\n        ...state,\r\n        loginError: action.loginError\r\n      };\r\n    case \"LOGIN_SUCSESS\":\r\n      return {\r\n        ...state,\r\n        userName: action.userName,\r\n        accept: action.accept\r\n      };\r\n    case \"LOG_OUT\":\r\n      return {\r\n        userName: \"Гость\",\r\n        accept: false,\r\n        loginError: \"\",\r\n        mainTable: {\r\n          null: {\r\n            id: null,\r\n            country: null,\r\n            region: null,\r\n            city: null,\r\n            street: null,\r\n            build: null\r\n          }\r\n        },\r\n        singleRow: null\r\n      };\r\n    case \"PUSH_TABLE\":\r\n      return {\r\n        ...state,\r\n        mainTable: action.mainTable\r\n      };\r\n    case \"PUSH_ROW\":\r\n      return {\r\n        ...state,\r\n        // mainTable: {\r\n        //   [action.id]:action.newTable\r\n        // }\r\n        [state.mainTable]:{ [action.id]: action.newTable}\r\n        \r\n      };\r\n      case \"DATA_ERROR\":\r\n        return{\r\n          ...state,\r\n          dbErr: action.dbErr\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const store = createStore(reducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}